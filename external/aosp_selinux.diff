diff --git a/libsepol/Android.bp b/libsepol/Android.bp
index 710c3a01..1bee09f3 100644
--- a/libsepol/Android.bp
+++ b/libsepol/Android.bp
@@ -60,6 +60,7 @@ cc_library {
     defaults: ["libsepol_defaults"],
     host_supported: true,
     srcs: [
+        "src/android_m_compat.c",
         "src/assertion.c",
         "src/avrule_block.c",
         "src/avtab.c",
diff --git a/libsepol/include/sepol/policydb/policydb.h b/libsepol/include/sepol/policydb/policydb.h
index 8be43875..23fb4117 100644
--- a/libsepol/include/sepol/policydb/policydb.h
+++ b/libsepol/include/sepol/policydb/policydb.h
@@ -520,6 +520,12 @@ typedef struct policydb {
 	/* Whether this policydb is mls, should always be set */
 	int mls;
 
+	/* RTM_GETLINK is not allowed on netlink route sockets */
+	int android_netlink_route;
+
+	/* RTM_GETNEIGH is not allowed on netlink route sockets */
+	int android_netlink_getneigh;
+
 	/* symbol tables */
 	symtab_t symtab[SYM_NUM];
 #define p_commons symtab[SYM_COMMONS]
diff --git a/libsepol/src/android_m_compat.c b/libsepol/src/android_m_compat.c
new file mode 100644
index 00000000..555be662
--- /dev/null
+++ b/libsepol/src/android_m_compat.c
@@ -0,0 +1,10 @@
+#include "android_m_compat.h"
+#include "debug.h"
+
+void avtab_android_m_compat_set(struct sepol_handle *handle)
+{
+	if (!handle->avtab_android_m_compat) {
+		ERR(handle, "(Android M policy compatibility mode)");
+		handle->avtab_android_m_compat = 1;
+	}
+}
diff --git a/libsepol/src/android_m_compat.h b/libsepol/src/android_m_compat.h
new file mode 100644
index 00000000..a001be42
--- /dev/null
+++ b/libsepol/src/android_m_compat.h
@@ -0,0 +1,18 @@
+#include "handle.h"
+
+/*
+ * extended permissions compatibility. Make ToT Android kernels compatible
+ * with Android M releases
+ */
+#define AVTAB_OPTYPE_ALLOWED	0x1000
+#define AVTAB_OPTYPE_AUDITALLOW	0x2000
+#define AVTAB_OPTYPE_DONTAUDIT	0x4000
+#define AVTAB_OPTYPE		(AVTAB_OPTYPE_ALLOWED | \
+				AVTAB_OPTYPE_AUDITALLOW | \
+				AVTAB_OPTYPE_DONTAUDIT)
+#define AVTAB_XPERMS_OPTYPE	4
+
+#define avtab_xperms_to_optype(x) (x << AVTAB_XPERMS_OPTYPE)
+#define avtab_optype_to_xperms(x) (x >> AVTAB_XPERMS_OPTYPE)
+
+void avtab_android_m_compat_set(struct sepol_handle *handle);
diff --git a/libsepol/src/avtab.c b/libsepol/src/avtab.c
index 82fec783..6fa089f9 100644
--- a/libsepol/src/avtab.c
+++ b/libsepol/src/avtab.c
@@ -48,6 +48,7 @@
 
 #include "debug.h"
 #include "private.h"
+#include "android_m_compat.h"
 
 /* Based on MurmurHash3, written by Austin Appleby and placed in the
  * public domain.
@@ -441,6 +442,7 @@ int avtab_read_item(struct policy_file *fp, uint32_t vers, avtab_t * a,
 	avtab_key_t key;
 	avtab_datum_t datum;
 	avtab_extended_perms_t xperms;
+	unsigned int android_m_compat_optype = 0;
 	unsigned set;
 	unsigned int i;
 	int rc;
@@ -535,6 +537,13 @@ int avtab_read_item(struct policy_file *fp, uint32_t vers, avtab_t * a,
 	key.target_class = le16_to_cpu(buf16[items++]);
 	key.specified = le16_to_cpu(buf16[items++]);
 
+	if ((key.specified & AVTAB_OPTYPE) &&
+			(vers == POLICYDB_VERSION_XPERMS_IOCTL)) {
+		key.specified = avtab_optype_to_xperms(key.specified);
+		android_m_compat_optype = 1;
+		avtab_android_m_compat_set(fp->handle);
+	}
+
 	set = 0;
 	for (i = 0; i < ARRAY_SIZE(spec_order); i++) {
 		if (key.specified & spec_order[i])
@@ -557,12 +566,24 @@ int avtab_read_item(struct policy_file *fp, uint32_t vers, avtab_t * a,
 			return -1;
 		}
 		xperms.specified = buf8;
-		rc = next_entry(&buf8, fp, sizeof(uint8_t));
-		if (rc < 0) {
-			ERR(fp->handle, "truncated entry");
-			return -1;
+		if (fp->handle->avtab_android_m_compat ||
+				((xperms.specified != AVTAB_XPERMS_IOCTLFUNCTION) &&
+				(xperms.specified != AVTAB_XPERMS_IOCTLDRIVER) &&
+				(vers == POLICYDB_VERSION_XPERMS_IOCTL))) {
+			xperms.driver = xperms.specified;
+			if (android_m_compat_optype)
+				xperms.specified = AVTAB_XPERMS_IOCTLDRIVER;
+			else
+				xperms.specified = AVTAB_XPERMS_IOCTLFUNCTION;
+			avtab_android_m_compat_set(fp->handle);
+		} else {
+			rc = next_entry(&buf8, fp, sizeof(uint8_t));
+			if (rc < 0) {
+				ERR(fp->handle, "truncated entry");
+				return -1;
+			}
+			xperms.driver = buf8;
 		}
-		xperms.driver = buf8;
 		rc = next_entry(buf32, fp, sizeof(uint32_t)*8);
 		if (rc < 0) {
 			ERR(fp->handle, "truncated entry");
diff --git a/libsepol/src/handle.c b/libsepol/src/handle.c
index 2e9a4ad1..6025b27c 100644
--- a/libsepol/src/handle.c
+++ b/libsepol/src/handle.c
@@ -21,6 +21,9 @@ sepol_handle_t *sepol_handle_create(void)
 	/* by default needless unused branch of tunables would be discarded  */
 	sh->preserve_tunables = 0;
 
+	/* for Android M compat xperm policy  */
+	sh->avtab_android_m_compat = 0;
+
 	return sh;
 }
 
diff --git a/libsepol/src/handle.h b/libsepol/src/handle.h
index 7728d04b..45d15feb 100644
--- a/libsepol/src/handle.h
+++ b/libsepol/src/handle.h
@@ -18,6 +18,7 @@ struct sepol_handle {
 	int disable_dontaudit;
 	int expand_consume_base;
 	int preserve_tunables;
+	int avtab_android_m_compat;
 };
 
 #endif
diff --git a/libsepol/src/policydb.c b/libsepol/src/policydb.c
index b79c19b9..62aee48d 100644
--- a/libsepol/src/policydb.c
+++ b/libsepol/src/policydb.c
@@ -4360,6 +4360,8 @@ int policydb_read(policydb_t * p, struct policy_file *fp, unsigned verbose)
 		p->mls = 0;
 	}
 
+	p->android_netlink_route = buf[bufindex] & POLICYDB_CONFIG_ANDROID_NETLINK_ROUTE;
+	p->android_netlink_getneigh = buf[bufindex] & POLICYDB_CONFIG_ANDROID_NETLINK_GETNEIGH;
 	p->handle_unknown = buf[bufindex] & POLICYDB_CONFIG_UNKNOWN_MASK;
 
 	bufindex++;
